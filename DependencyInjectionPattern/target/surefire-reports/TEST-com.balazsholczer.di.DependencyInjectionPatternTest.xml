<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.264" tests="15" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="24"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\temp\udemy-design-Patterns-SOLID\DependencyInjectionPattern\target\test-classes;C:\temp\udemy-design-Patterns-SOLID\DependencyInjectionPattern\target\classes;C:\Users\Lenovo\.m2\repository\org\junit\jupiter\junit-jupiter\5.9.2\junit-jupiter-5.9.2.jar;C:\Users\Lenovo\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.9.2\junit-jupiter-api-5.9.2.jar;C:\Users\Lenovo\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\Lenovo\.m2\repository\org\junit\platform\junit-platform-commons\1.9.2\junit-platform-commons-1.9.2.jar;C:\Users\Lenovo\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Lenovo\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.9.2\junit-jupiter-params-5.9.2.jar;C:\Users\Lenovo\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.9.2\junit-jupiter-engine-5.9.2.jar;C:\Users\Lenovo\.m2\repository\org\junit\platform\junit-platform-engine\1.9.2\junit-platform-engine-1.9.2.jar;"/>
    <property name="java.vm.vendor" value="Azul Systems, Inc."/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="http://www.azul.com/"/>
    <property name="user.timezone" value="Europe/Warsaw"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="24"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="C:\Users\Lenovo\.sdkman\candidates\java\current\bin"/>
    <property name="sun.java.command" value="C:\Users\Lenovo\AppData\Local\Temp\surefire3914246704435135467\surefirebooter-20250818233749155_353.jar C:\Users\Lenovo\AppData\Local\Temp\surefire3914246704435135467 2025-08-18T23-34-24_764-jvmRun1 surefire-20250818233749155_351tmp surefire_43-20250818233749155_352tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\temp\udemy-design-Patterns-SOLID\DependencyInjectionPattern\target\test-classes;C:\temp\udemy-design-Patterns-SOLID\DependencyInjectionPattern\target\classes;C:\Users\Lenovo\.m2\repository\org\junit\jupiter\junit-jupiter\5.9.2\junit-jupiter-5.9.2.jar;C:\Users\Lenovo\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.9.2\junit-jupiter-api-5.9.2.jar;C:\Users\Lenovo\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\Lenovo\.m2\repository\org\junit\platform\junit-platform-commons\1.9.2\junit-platform-commons-1.9.2.jar;C:\Users\Lenovo\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Lenovo\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.9.2\junit-jupiter-params-5.9.2.jar;C:\Users\Lenovo\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.9.2\junit-jupiter-engine-5.9.2.jar;C:\Users\Lenovo\.m2\repository\org\junit\platform\junit-platform-engine\1.9.2\junit-platform-engine-1.9.2.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\Lenovo"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-03-18"/>
    <property name="java.home" value="C:\Users\Lenovo\.sdkman\candidates\java\current"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\temp\udemy-design-Patterns-SOLID\DependencyInjectionPattern"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="surefire.real.class.path" value="C:\Users\Lenovo\AppData\Local\Temp\surefire3914246704435135467\surefirebooter-20250818233749155_353.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="24+36"/>
    <property name="user.name" value="Lenovo"/>
    <property name="stdout.encoding" value="Cp1252"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Zulu24.28+85-CA"/>
    <property name="localRepository" value="C:\Users\Lenovo\.m2\repository"/>
    <property name="java.vendor.url.bug" value="http://www.azul.com/support/"/>
    <property name="java.io.tmpdir" value="C:\Users\Lenovo\AppData\Local\Temp\"/>
    <property name="java.version" value="24"/>
    <property name="user.dir" value="C:\temp\udemy-design-Patterns-SOLID\DependencyInjectionPattern"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Users\Lenovo\.sdkman\candidates\java\current\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Users\Lenovo\.sdkman\candidates\scala\current\bin;C:\Users\Lenovo\.sdkman\candidates\sbt\current\bin;C:\Users\Lenovo\.sdkman\candidates\maven\current\bin;C:\Users\Lenovo\.sdkman\candidates\kotlin\current\bin;C:\Users\Lenovo\.sdkman\candidates\java\current\bin;C:\Users\Lenovo\.sdkman\candidates\groovy\current\bin;C:\Users\Lenovo\.sdkman\candidates\grails\current\bin;C:\Users\Lenovo\.sdkman\candidates\gradle\current\bin;C:\Users\Lenovo\bin;C:\Program Files\Git\mingw64\bin;C:\Program Files\Git\usr\local\bin;C:\Program Files\Git\usr\bin;C:\Program Files\Git\usr\bin;C:\Program Files\Git\mingw64\bin;C:\Program Files\Git\usr\bin;C:\Users\Lenovo\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0;C:\WINDOWS\System32\OpenSSH;C:\Program Files\dotnet;C:\Program Files\Git\cmd;C:\Users\Lenovo\AppData\Local\nvm;C:\nvm4w\nodejs;C:\Users\Lenovo\anaconda3;C:\Users\Lenovo\anaconda3\Library\mingw-w64\bin;C:\Users\Lenovo\anaconda3\Library\usr\bin;C:\Users\Lenovo\anaconda3\Library\bin;C:\Users\Lenovo\anaconda3\Scripts;C:\Users\Lenovo\AppData\Local\Microsoft\WindowsApps;C:\Users\Lenovo\AppData\Local\JetBrains\Toolbox\scripts;C:\Users\Lenovo\AppData\Local\Microsoft\WindowsApps;C:\Users\Lenovo\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\Lenovo\AppData\Local\nvm;C:\nvm4w\nodejs;C:\Program Files\Git\usr\bin\vendor_perl;C:\Program Files\Git\usr\bin\core_perl;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="Cp1252"/>
    <property name="java.vendor" value="Azul Systems, Inc."/>
    <property name="java.vm.version" value="24+36"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="68.0"/>
  </properties>
  <testcase name="testSingletonScope" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.102">
    <system-out><![CDATA[DIContainer: Registered singleton - UserRepository
DIContainer: Returning singleton - UserRepository
DIContainer: Returning singleton - UserRepository
]]></system-out>
  </testcase>
  <testcase name="testEquivalenceAcrossApproaches" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.01">
    <system-out><![CDATA[DIContainer: Registered singleton - UserRepository
DIContainer: Returning singleton - UserRepository
UserService: Injected DatabaseUserRepository
FunctionalDI: Registered provider - UserRepository
FunctionalDI: Registered provider - UserService
UserService: Injected DatabaseUserRepository
DatabaseUserRepository: Saving user to database - traditional
UserService: User created - traditional
DatabaseUserRepository: Saving user to database - functional
UserService: User created - functional
UserService: Getting user - traditional
DatabaseUserRepository: Finding user by id - traditional
UserService: Getting user - functional
DatabaseUserRepository: Finding user by id - functional
]]></system-out>
  </testcase>
  <testcase name="testServiceLifecycle" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.004">
    <system-out><![CDATA[UserService: Injected DatabaseUserRepository
DatabaseUserRepository: Saving user to database - 1
UserService: User created - 1
DatabaseUserRepository: Saving user to database - 2
UserService: User created - 2
DatabaseUserRepository: Saving user to database - 3
UserService: User created - 3
UserService: Getting all users
DatabaseUserRepository: Finding all users
]]></system-out>
  </testcase>
  <testcase name="testContainerRegistrationLogging" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.007">
    <system-out><![CDATA[DIContainer: Registered singleton - UserRepository
DIContainer: Registered factory - String
FunctionalDI: Registered provider - TestKey
]]></system-out>
  </testcase>
  <testcase name="testContainerErrorHandling" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.005"/>
  <testcase name="testComplexDependencyGraph" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.008">
    <system-out><![CDATA[DIContainer: Registered factory - UserRepository
DIContainer: Creating instance via factory - UserRepository
UserService: Injected DatabaseUserRepository
DIContainer: Creating instance via factory - UserRepository
UserService: Injected DatabaseUserRepository
DatabaseUserRepository: Saving user to database - user1
UserService: User created - user1
DatabaseUserRepository: Saving user to database - user2
UserService: User created - user2
UserService: Getting user - user1
DatabaseUserRepository: Finding user by id - user1
UserService: Getting user - user2
DatabaseUserRepository: Finding user by id - user2
]]></system-out>
  </testcase>
  <testcase name="testTraditionalDependencyInjection" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.003">
    <system-out><![CDATA[DIContainer: Registered singleton - UserRepository
DIContainer: Returning singleton - UserRepository
UserService: Injected DatabaseUserRepository
DatabaseUserRepository: Saving user to database - 1
UserService: User created - 1
UserService: Getting user - 1
DatabaseUserRepository: Finding user by id - 1
]]></system-out>
  </testcase>
  <testcase name="testMultipleServiceInstances" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.006">
    <system-out><![CDATA[DIContainer: Registered singleton - UserRepository
DIContainer: Returning singleton - UserRepository
UserService: Injected DatabaseUserRepository
DIContainer: Returning singleton - UserRepository
UserService: Injected DatabaseUserRepository
DatabaseUserRepository: Saving user to database - shared1
UserService: User created - shared1
DatabaseUserRepository: Saving user to database - shared2
UserService: User created - shared2
UserService: Getting all users
DatabaseUserRepository: Finding all users
UserService: Getting all users
DatabaseUserRepository: Finding all users
UserService: Getting all users
DatabaseUserRepository: Finding all users
]]></system-out>
  </testcase>
  <testcase name="testConstructorInjection" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.002">
    <system-out><![CDATA[DIContainer: Registered singleton - UserRepository
DIContainer: Returning singleton - UserRepository
UserService: Injected DatabaseUserRepository
DatabaseUserRepository: Saving user to database - 3
UserService: User created - 3
UserService: Getting user - 3
DatabaseUserRepository: Finding user by id - 3
]]></system-out>
  </testcase>
  <testcase name="testFunctionalDependencyInjection" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.005">
    <system-out><![CDATA[FunctionalDI: Registered provider - UserRepository
FunctionalDI: Registered provider - UserService
UserService: Injected DatabaseUserRepository
DatabaseUserRepository: Saving user to database - 2
UserService: User created - 2
UserService: Getting user - 2
DatabaseUserRepository: Finding user by id - 2
]]></system-out>
  </testcase>
  <testcase name="testUserModel" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.008"/>
  <testcase name="testUserService" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.006">
    <system-out><![CDATA[UserService: Injected DatabaseUserRepository
DatabaseUserRepository: Saving user to database - 1
UserService: User created - 1
UserService: Getting user - 1
DatabaseUserRepository: Finding user by id - 1
UserService: Getting all users
DatabaseUserRepository: Finding all users
]]></system-out>
  </testcase>
  <testcase name="testUserRepository" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.003">
    <system-out><![CDATA[DatabaseUserRepository: Saving user to database - 1
DatabaseUserRepository: Finding user by id - 1
DatabaseUserRepository: Finding all users
]]></system-out>
  </testcase>
  <testcase name="testFunctionalContainerBasics" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.003">
    <system-out><![CDATA[FunctionalDI: Registered provider - String
FunctionalDI: Registered provider - Integer
]]></system-out>
  </testcase>
  <testcase name="testFactoryRegistration" classname="com.balazsholczer.di.DependencyInjectionPatternTest" time="0.002">
    <system-out><![CDATA[DIContainer: Registered factory - UserRepository
DIContainer: Creating instance via factory - UserRepository
DIContainer: Creating instance via factory - UserRepository
]]></system-out>
  </testcase>
</testsuite>